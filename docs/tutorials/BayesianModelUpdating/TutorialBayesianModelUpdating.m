%% TutorialBayesianModelUpdating: 
  %In this tutorial, a 3 degree of freedom dynamic model will be defined and updated. Synthetic data
  %will be generated by means of a deterministic analysis and then
  %distorted by gaussian noise.
    % inference.BayesianModelUpdating
    % see http://cossan.co.uk/wiki/index.php/@BayesianModelUpdating
    %
    % @author Ander Gray<ander.gray@liv.ac.uk>
    % =====================================================================
    % This file is part of openCOSSAN.  The open general purpose matlab
    % toolbox for numerical analysis, risk and uncertainty quantification.
    %
    % openCOSSAN is free software: you can redistribute it and/or modify
    % it under the terms of the GNU General Public License as published by
    % the Free Software Foundation, either version 3 of the License.
    %
    % openCOSSAN is distributed in the hope that it will be useful,
    % but WITHOUT ANY WARRANTY; without even the implied warranty of
    % MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    % GNU General Public License for more details.
    %
    % You should have received a copy of the GNU General Public License
    % along with openCOSSAN.  If not, see <http://www.gnu.org/licenses/>.
    % =====================================================================
    
    

%% Initial setting 
% Reset the random number generator in order to obtain always the same results.
% DO NOT CHANGE THE VALUES OF THE SEED

% The tutorial assumes that OpenCossan has been propely installed and
% initialised.

%% Define an Analysis
% This allows to store the results of the simulation in a database (if
% initialised) or/and to define the random number generator
% import opencossan.*
opencossan.OpenCossan.setAnalysis('ProjectName','TutorialBayesianModelUpdating',...
                           'AnalysisName','Tutorial',...
                           'Seed',213985)

                       
%% Preparation of the Input
% Definition of the Parameters
k1=opencossan.common.inputs.RandomVariable('Sdistribution','uniform','mean',1,'std',0.3);
k2=opencossan.common.inputs.RandomVariable('Sdistribution','uniform','mean',1,'std',0.3);
k3=opencossan.common.inputs.RandomVariable('Sdistribution','uniform','mean',1,'std',0.3);


k4=opencossan.common.inputs.Parameter('value',1,'description','Spring constant 4');
k5=opencossan.common.inputs.Parameter('value',1,'description','Spring constant 5');
k6=opencossan.common.inputs.Parameter('value',6,'description','Spring constant 6');

m1=opencossan.common.inputs.Parameter('value',1,'description','mass 1');
m2=opencossan.common.inputs.Parameter('value',1,'description','mass 2');
m3=opencossan.common.inputs.Parameter('value',1,'description','mass 3');

Xrvset=opencossan.common.inputs.RandomVariableSet('CXrandomVariables',{k1 k2 k3},'CSmembers',{'k1' 'k2' 'k3'});

%% Prepare Input Object
% The above prepared object can be added to an Input Object
Xinput=opencossan.common.inputs.Input('Members',{Xrvset k4 k5 k6 m1 m2 m3},'MembersNames',{'Xrvset' 'k4' 'k5' 'k6' 'm1' 'm2' 'm3'});
% Show summary of the Input Object
display(Xinput)
%% Preparation of the Evaluator
% Use of a matlab script to compute the Beam displacement
Sfolder=fileparts(which('TutorialBayesianModelUpdating.m'));% returns the current folder
Xmio=opencossan.workers.Mio('FullFileName',fullfile(Sfolder,'MatlabModel','frequencies.m'),...
    'InputNames',{'k1' 'k2' 'k3' 'k4' 'k5' 'k6' 'm1' 'm2' 'm3'}, ...
    'OutputNames',{'f1' 'f2' 'f3'},'Format','structure');
% Add the MIO object to an Evaluator object
Xevaluator=opencossan.workers.Evaluator('CXmembers',{Xmio},'CSmembers',{'Xmio'});

%% Preparation of the Physical Model
% Define the Physical Model
XmodelBeamMatlab=opencossan.common.Model('Xinput',Xinput,'Xevaluator',Xevaluator);

% Perform deterministic analysis
Xout=XmodelBeamMatlab.deterministicAnalysis;
NominalDisplacement=Xout.getValues('Cnames',{'f1' 'f2' 'f3'});


%% Uncertainty Quantification
% Define simulation method
Xmc=opencossan.simulations.MonteCarlo('Nsamples',1000);
% preform Analysis
XsimOutMC=Xmc.apply(XmodelBeamMatlab);